---
import { siteTitle } from "../constants";
import { headPageTitle } from "../lib/utils";
import { ClientRouter } from "astro:transitions";
import LayoutCommon from "../layouts/LayoutCommon.astro";
import ResponsiveImage from "../components/ResponsiveImage.astro";
import Spinner from "../components/Spinner.astro";
import ChevronLeftIcon from "../icons/ChevronLeft.svg";
import ChevronRightIcon from "../icons/ChevronRight.svg";
import CloseIcon from "../icons/Close.svg";
import DownloadIcon from "../icons/Download.svg";

interface Props {
  photo: any;
  backLink;
  backLinkText;
  prevLink;
  nextLink;
}

const { photo, backLink, backLinkText, prevLink, nextLink } = Astro.props;

const imgUrl = `https:${photo.fields.file.url}`;
---

<LayoutCommon
  title={headPageTitle(photo.fields.title, siteTitle)}
  description={photo.fields.title}
  ogImage={`${imgUrl}?w=1200&h=600&fit=thumb&q=70&fm=jpg`}
  ogType="image"
>
  <Fragment slot="head">
    <link rel="preconnect" href="https://images.ctfassets.net/" crossorigin />
    <ClientRouter />
  </Fragment>
  <main>
    <div class="photo-container">
      <nav>
        <ul>
          {
            prevLink && (
              <li>
                <a href={prevLink} class="photo-prev" data-astro-prefetch>
                  <ChevronLeftIcon aria-hidden="true" />
                  <span class="visually-hidden">Foto precedente</span>
                </a>
              </li>
            )
          }
          {
            nextLink && (
              <li>
                <a href={nextLink} class="photo-next" data-astro-prefetch>
                  <ChevronRightIcon aria-hidden="true" />
                  <span class="visually-hidden">Foto successiva</span>
                </a>
              </li>
            )
          }
          <li>
            <a href={backLink} class="photo-back">
              <CloseIcon aria-hidden="true" /><span class="visually-hidden"
                >{backLinkText}</span
              ></a
            >
          </li>
        </ul>
        <button
          class="photo-download"
          data-file={photo.fields.file.url}
          data-name={photo.fields.file.fileName}
          ><DownloadIcon aria-hidden="true" class="download-icon" />
          <Spinner class="loading-indicator" size="1.5rem" />
          <span class="visually-hidden">Scarica la foto</span></button
        >
      </nav>

      <div class="picture">
        <div class="loader">
          <Spinner size="2rem" />
          <p>Carico la foto</p>
        </div>
        <ResponsiveImage
          src={`${imgUrl}?w=3000&q=60&fm=avif`}
          sizes={{
            "600": `${imgUrl}?w=1000&q=70&fm=avif`,
            "1024": `${imgUrl}?w=1400&q=70&fm=avif`,
            "1600": `${imgUrl}?w=2000&q=70&fm=avif`,
          }}
          alt={photo.fields.title || ""}
          loading="eager"
          fetchpriority="high"
          width={photo.fields.file.details.image.width}
          height={photo.fields.file.details.image.height}
          class="photo-picture"
        />
      </div>
      <p class="photo-caption" aria-hidden="true">{photo.fields.title}</p>
    </div>
  </main>
</LayoutCommon>

<style media="screen">
  .photo-container {
    overflow: hidden;
    position: fixed;
    width: 100vw;
    height: 100svh;
  }
  .picture {
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 1fr;
    height: 100svh;
    width: 100%;
  }

  .loader {
    grid-area: 1/1;
    place-self: center;
    z-index: 2;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    z-index: 1;
  }

  :global(.photo-picture) {
    display: grid;
    grid-area: 1/1;
    place-self: center;
  }

  img {
    display: block;
    aspect-ratio: attr(width) / attr(height);
    width: 100vw;
    max-height: 100svh;
    object-fit: contain;
    z-index: 2;
    transition: transform 0.2s cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  nav a,
  nav button {
    position: absolute;
    z-index: 3;
    padding: 0.85rem;
  }

  nav svg {
    height: 1.5rem;
    color: var(--textAccent);
  }

  .photo-prev,
  .photo-next {
    top: 50%;
  }

  .photo-prev {
    left: 0;
    transform: translate(0%, -50%);
  }

  .photo-next {
    right: 0;
    transform: translate(0%, -50%);
  }

  .photo-back {
    right: 1rem;
    transform: translateX(5%);
  }

  .photo-download {
    right: 4rem;
    transform: translateX(5%);
    cursor: pointer;
  }

  .photo-download .loading-indicator {
    display: none;
  }

  .photo-download .download-icon {
    display: block;
  }

  .photo-download.is-downloading .loading-indicator {
    display: block;
  }
  .photo-download.is-downloading .download-icon {
    display: none;
  }

  .photo-caption {
    position: absolute;
    width: 100%;
    bottom: 0;
    left: 0;
    text-align: center;
    padding: 1.5rem;
    z-index: 3;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    font-weight: bold;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .is-hovering .photo-caption {
    opacity: 1;
  }

  @media screen and (width < 60rem) {
    .photo-prev,
    .photo-next {
      opacity: 0;
    }

    .is-hovering .photo-prev,
    .is-hovering .photo-next {
      opacity: 1;
    }
  }

  @keyframes wobble {
    0% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(-10px);
    }
    50% {
      transform: translateX(10px);
    }
    75% {
      transform: translateX(-5px);
    }
    100% {
      transform: translateX(0);
    }
  }

  img.wobble {
    animation: wobble 0.5s ease;
  }
</style>

<script>
  //@ts-nocheck
  import Hammer from "hammerjs";
  import { throttle } from "../lib/utils";

  const container = document.querySelector(".photo-container");
  const image = document.querySelector(".picture img");
  const downloadButton = document.querySelector(".photo-download");
  const nextPhoto = document.querySelector(".photo-next");
  const prevPhoto = document.querySelector(".photo-prev");
  const loader = document.querySelector(".loader");

  downloadButton.addEventListener("click", async function (e) {
    e.preventDefault();

    downloadButton.classList.add("is-downloading");
    const fileName = downloadButton.getAttribute("data-name");
    const remoteFileUrl = `https:${downloadButton.getAttribute("data-file")}`;
    const response = await fetch(remoteFileUrl);
    const fileData = await response.blob();
    const photoUrl = URL.createObjectURL(fileData);
    const link = document.createElement("a");
    link.href = photoUrl;
    link.download = fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(photoUrl);
    downloadButton.classList.remove("is-downloading");
  });

  // create a div over the real size of the image to trigger an hover effect and show the caption
  const imageWidth = parseInt(image.getAttribute("width"));
  const imageHeight = parseInt(image.getAttribute("height"));
  const imageRatio = imageHeight / imageWidth;
  const imageOverlayDiv = document.createElement("div");

  imageOverlayDiv.setAttribute("aria-hidden", "true");
  imageOverlayDiv.setAttribute("class", "photo-overlay");
  imageOverlayDiv.style.position = "absolute";
  imageOverlayDiv.style.top = "0px";
  imageOverlayDiv.style.zIndex = "2";
  imageOverlayDiv.style.cursor = "help";
  const hammertime = new Hammer(container, { touchAction: "auto" });

  function appendOverlay() {
    const shortest = Math.min(window.innerHeight, window.innerWidth);

    if (shortest === window.innerHeight) {
      // landscape
      const imageRealWidth = shortest / imageRatio;
      imageOverlayDiv.style.left = `${
        (window.innerWidth - imageRealWidth) / 2
      }px`;
      imageOverlayDiv.style.top = "0px";
      imageOverlayDiv.style.width = `${imageRealWidth}px`;
      imageOverlayDiv.style.height = `${window.innerHeight}px`;
    } else {
      // portrait
      const imageRealHeight = window.innerWidth * imageRatio;

      imageOverlayDiv.style.left = "0px";
      imageOverlayDiv.style.top = `${
        (window.innerHeight - imageRealHeight) / 2
      }px`;
      imageOverlayDiv.style.width = `${window.innerWidth}px`;
      imageOverlayDiv.style.height = `${imageRealHeight}px`;
    }

    container.append(imageOverlayDiv);
  }

  imageOverlayDiv.addEventListener("mouseenter", function () {
    container.classList.add("is-hovering");
    imageOverlayDiv.focus();
  });
  imageOverlayDiv.addEventListener("mouseleave", function () {
    container.classList.remove("is-hovering");
  });

  container.addEventListener("click", function (e) {
    if (e.target !== imageOverlayDiv) {
      container.classList.remove("is-hovering");
    }
  });

  appendOverlay();

  window.addEventListener("resize", throttle(appendOverlay, 100), {
    passive: true,
  });

  document.body.style.touchAction = "pan-x"; // prevent others

  function triggerWobble() {
    image.classList.add("wobble");
    setTimeout(() => {
      image.classList.remove("wobble");
    }, 500); // Duration of the animation
  }

  hammertime.get("swipe").set({
    direction: Hammer.DIRECTION_HORIZONTAL,
    threshold: 5,
  });

  hammertime.on("swipeleft", function () {
    if (nextPhoto) {
      image.style.transform = "translateX(-100%)";
      loader.style.opacity = 0;
      setTimeout(() => {
        loader.style.opacity = 1;
        window.location.href = nextPhoto.getAttribute("href");
      }, 200);
    } else {
      triggerWobble();
    }
  });

  hammertime.on("swiperight", function () {
    if (prevPhoto) {
      loader.style.opacity = 0;
      image.style.transform = "translateX(100%)";
      setTimeout(() => {
        window.location.href = prevPhoto.getAttribute("href");
        loader.style.opacity = 1;
      }, 200);
    } else {
      triggerWobble();
    }
  });
</script>
