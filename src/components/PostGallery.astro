---
import "photoswipe/dist/photoswipe.css";
import ResponsiveImage from "./ResponsiveImage.astro";
import PhotoDisclaimer from "./PhotoDisclaimer.astro";
import { postPhotoSlug, validPhotos } from "../lib/utils";
interface Props {
  post: any;
}
const { post } = Astro.props;
---

<ul id="post-gallery">
  {
    validPhotos(post.fields.gallery).map((photo) => (
      <li>
        <a
          href={`/${postPhotoSlug(post, photo)}`}
          data-download={photo.fields.file.url}
          data-pswp-src={`${photo.fields.file.url}?w=1024&fit=thumb&q=60&fm=avif`}
          data-pswp-width={photo.fields.file.details.image.width}
          data-pswp-height={photo.fields.file.details.image.height}
          data-pswp-srcset={`${photo.fields.file.url}?w=1200&fit=thumb&q=60&fm=avif 1000w, ${photo.fields.file.url}?w=2500&fit=thumb&q=60&fm=avif 2000w`}
        >
          <ResponsiveImage
            src={`${photo.fields.file.url}?w=600&fit=thumb&q=60&fm=avif`}
            sizes={{
              "600": `${photo.fields.file.url}?w=300&fit=thumb&q=60&fm=avif`,
            }}
            alt={photo.fields.title || ""}
            loading="lazy"
            decoding="async"
            width={photo.fields.file.details.image.width}
            height={photo.fields.file.details.image.height}
          />
        </a>
      </li>
    ))
  }
</ul>
<p class="disclaimer">
  <PhotoDisclaimer />
</p>

<script>
  //@ts-nocheck
  import PhotoSwipeLightbox from "photoswipe/lightbox";
  import PhotoSwipe from "photoswipe";
  document.addEventListener("DOMContentLoaded", () => {
    const lightbox = new PhotoSwipeLightbox({
      gallery: "#post-gallery",
      children: "a",
      pswpModule: PhotoSwipe,
      showHideAnimationType: "zoom",
      showAnimationDuration: 500,
      hideAnimationDuration: 250,
    });
    lightbox.on("uiRegister", function () {
      lightbox.pswp.ui.registerElement({
        name: "download-button",
        order: 8,
        isButton: true,
        tagName: "a",
        html: {
          isCustomSVG: true,
          inner:
            '<path d="M20.5 14.3 17.1 18V10h-2.2v7.9l-3.4-3.6L10 16l6 6.1 6-6.1ZM23 23H9v2h14Z" id="pswp__icn-download"/>',
          outlineID: "pswp__icn-download",
        },

        onInit: (el, pswp) => {
          el.setAttribute("download", "");
          el.setAttribute("target", "_blank");
          el.setAttribute("rel", "noopener");

          pswp.on("change", () => {
            el.href = pswp.currSlide.data.element.getAttribute("data-download");
          });
        },
      });
      lightbox.pswp.ui.registerElement({
        name: "custom-caption",
        order: 9,
        isButton: false,
        appendTo: "root",
        html: "Caption text",
        onInit: (el, pswp) => {
          lightbox.pswp.on("change", () => {
            const currSlideElement = lightbox.pswp.currSlide.data.element;
            let captionHTML = "";
            if (currSlideElement) {
              captionHTML = currSlideElement
                .querySelector("img")
                .getAttribute("alt");
            }
            el.innerHTML = captionHTML || "";
          });
        },
      });
    });
    lightbox.init();
  });
</script>

<style media="screen">
  img {
    display: block;

    background: var(--surfaceAccent);
  }

  .disclaimer {
    font-size: 0.75rem;
    margin-top: 2.5rem;
    max-width: 70ch;
  }

  ul {
    --space: 1.5rem;
    display: block;
    columns: 2;
    column-gap: var(--space);
  }
  li {
    margin-bottom: var(--space);
    break-inside: avoid;
  }

  @media screen and (width > 40rem) {
    ul {
      columns: 3;
    }
  }

  @media screen and (width > 70rem) {
    ul {
      columns: 4;
    }
  }

  :global(.pswp__custom-caption) {
    background: black;
    font-size: 16px;
    color: white;
    width: fit-content;
    padding: 2px 8px;
    border-radius: 4px;
    position: absolute;
    left: 50%;
    bottom: 16px;
    transform: translateX(-50%);
    text-align: center;
  }

  a:hover img {
    outline: 4px solid var(--textAccent);
  }
</style>
