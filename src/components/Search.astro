---
import { getData } from "../lib/contentful";
import SearchIcon from "../icons/Search.svg";

const { post: posts } = await getData({ type: "post", sort: "-fields.date" });
const dataset = posts.map((post) => ({
  title: post.fields.title,
  slug: post.fields.slug,
  tags: post.fields.tags,
  date: post.fields.date,
  description: post.fields.description,
  image: post.fields.cover.fields.file.url,
}));
---

<form id="search-form" role="search" data-posts={JSON.stringify(dataset)}>
  <label for="search-input" class="visually-hidden">Cerca unâ€™uscita</label>
  <input
    type="text"
    id="search-input"
    autocomplete="off"
    aria-autocomplete="none"
  />
  <SearchIcon aria-hidden="true" />
  <div id="results"><div id="arrow" aria-hidden="true"></div></div>
</form>

<style media="screen">
  form {
    display: grid;
  }

  form svg {
    height: 1em;
    grid-area: 1 / 1;
    transform: translate(0.75rem, 0.75rem);
  }

  form input {
    grid-area: 1 / 1;
    padding: 0.5rem;
    text-indent: 2rem;
    display: block;
    width: 11rem;
    color: var(--text);
  }

  @media screen and (width < 24rem) {
    form input {
      width: 9rem;
    }
  }

  #results {
    --borderColor: var(--accent);
    --borderWidth: var(--focusOutlineWidth);
    width: max-content;
    position: fixed;
    top: 0;
    left: 0;
    background: var(--surface);
    padding: 1rem;
    display: none;
    border: var(--borderWidth) solid var(--borderColor);
    border-radius: 15px;
    max-width: min(30ch, 75vw);
    z-index: 1000;
  }

  #arrow {
    position: absolute;
    background: var(--surface);
    width: 16px;
    height: 16px;
    transform: rotate(45deg) translateY(-0.4rem);
    border-color: var(--borderColor);
    border-top-width: var(--borderWidth);
    border-top-style: solid;
    border-left-width: var(--borderWidth);
    border-left-style: solid;
  }

  :global(#results ul) {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  :global(#results a) {
    display: flex;
    gap: 0.75rem;
    text-decoration: none;
    color: var(--text);
  }

  :global(#results img) {
    background: var(--surfaceAccent);
    flex-shrink: 0;
    width: 60px;
    height: 60px;
  }

  :global(#results div) {
    display: flex;
    flex-direction: column;
  }

  :global(#results p) {
    font-size: 0.8rem;
  }

  :global(#results div p:first-child) {
    font-weight: bold;
    font-size: 0.8rem;
    color: var(--textAccent);
    line-height: 1.4;
  }
  :global(#results div p:nth-child(2)) {
    font-size: 0.6rem;
  }
</style>

<script>
  //@ts-nocheck

  import { computePosition, offset, arrow } from "@floating-ui/dom";
  import { trapFocus } from "../lib/utils";
  const form = document.querySelector("#search-form");
  const trigger = document.querySelector("#search-input");
  const results = document.querySelector("#results");
  const arrowElement = document.querySelector("#arrow");
  const posts = JSON.parse(form.getAttribute("data-posts"));
  const resultList = document.createElement("ul");
  const hint = document.createElement("p");
  hint.classList.add("hint");
  hint.textContent = "Digita almento 3 caratteri";
  const noResults = document.createElement("p");
  noResults.classList.add("no-results");
  noResults.textContent = "Nessun Risultato";
  let searchResults = [];

  document.body.appendChild(results); // move out the dom

  trigger.addEventListener("keyup", function (e) {
    console.log(e.key);
    const query = e.target.value;

    showResults();
    if (e.key === "Escape") {
      trigger.value = "";
      hideResults();
    }

    if (query.length > 2) {
      searchResults = posts
        .filter(
          (post) =>
            post.title.toLowerCase().includes(query.toLowerCase()) ||
            post.tags.map((t) => t.toLowerCase()).includes(query.toLowerCase())
        )
        .slice(0, 5);
    } else {
      searchResults = [];
    }

    search(query);
  });

  trigger.addEventListener("blur", function (e) {
    if (!searchResults.length) {
      hideResults();
      trigger.value = "";
    }
  });

  document.addEventListener("keydown", function (event) {
    if (
      event.key === "Tab" &&
      searchResults.length > 0 &&
      document.activeElement === trigger
    ) {
      event.preventDefault();
      const firstFocusableElement = results.querySelectorAll("a")[0];
      if (firstFocusableElement) {
        firstFocusableElement.focus();
        trapFocus(results);
      }
    }
  });

  function update() {
    computePosition(trigger, results, {
      placement: "bottom-left",
      strategy: "fixed",
      middleware: [offset(20), arrow({ element: arrowElement })],
    }).then(({ x, y, placement, middlewareData }) => {
      Object.assign(results.style, {
        left: `${x}px`,
        top: `${y}px`,
      });
      const { x: arrowX, y: arrowY } = middlewareData.arrow;
      const staticSide = {
        top: "bottom",
        right: "left",
        bottom: "top",
        left: "right",
      }[placement.split("-")[0]];

      Object.assign(arrowElement.style, {
        left: arrowX != null ? `${arrowX}px` : "",
        top: arrowY != null ? `${arrowY}px` : "",
        right: "",
        bottom: "",
        [staticSide]: "-4px",
      });
    });
  }

  function search(query) {
    if (query.length > 2) {
      if (searchResults.length > 0) {
        hideHint();
        hideNoResults();
        results.appendChild(resultList);
        resultList.innerHTML = "";
        searchResults.forEach((post) => {
          resultList.insertAdjacentHTML(
            "beforeend",
            `<li>
              <a href="/${post.slug}">
                <img src="${post.image}?w=100&h=100&fm=avif&fit=thumb&q=50" width="60" height="60" alt="" />
                <div>
                  <p>${post.title}</p>
                  <p>${post.description}</p>
                </div>
                
              </a>
            </li>`
          );
        });

        results.addEventListener("keyup", function (e) {
          if (e.key === "Escape") {
            hideResults();
            trigger.value = "";
            trigger.focus();
          }
        });
      } else {
        hideResultList();
        hideHint();
        results.appendChild(noResults);
      }
    } else {
      results.appendChild(hint);
      hideResultList();
      hideNoResults();
    }
  }

  function hideHint() {
    if (results.contains(hint)) {
      results.removeChild(hint);
    }
  }

  function hideNoResults() {
    if (results.contains(noResults)) {
      results.removeChild(noResults);
    }
  }

  function hideResultList() {
    if (results.contains(resultList)) {
      results.removeChild(resultList);
    }
  }

  function showResults() {
    results.style.display = "block";
    results.removeAttribute("inert");
    trigger.setAttribute("aria-expanded", "true");
    update();
  }

  function hideResults() {
    results.style.display = "";
    results.setAttribute("tabindex", "");
    results.setAttribute("inert", "");
    results.blur();
    trigger.setAttribute("aria-expanded", "false");
  }

  function setAriaAttributes() {
    results.setAttribute("tabindex", "-1");
    results.setAttribute("inert", "");
    results.setAttribute("aria-role", "dialog");
    trigger.setAttribute("aria-controls", "results");
    trigger.setAttribute("aria-expanded", "false");
  }

  setAriaAttributes();

  document.body.addEventListener("click", function (e) {
    if (!results.contains(e.target) && !trigger.contains(e.target)) {
      hideResults();
    }
  });
</script>
