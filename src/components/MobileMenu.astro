---
import Menu from "../icons/Menu.svg";
import CloseIcon from "../icons/Close.svg";
const { links, navLabel } = Astro.props;
---

<nav aria-label={navLabel}>
  <button id="nav-open">
    <Menu aria-hidden="true" />
    <span class="visually-hidden">Menu</span>
  </button>
  <div id="nav-panel">
    <button id="nav-close">
      <CloseIcon aria-hidden="true" />
      <span class="visually-hidden">Chiudi</span>
    </button>
    <ul role="list">
      {
        links.map((link) => (
          <li>
            <a
              href={link.href}
              aria-current={link.active ? "page" : null}
              data-astro-prefetch={link.prefetch}
            >
              {link.text}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<style media="screen">
  button {
    --buttonWidth: 1.5rem;
    background: none;
    border: none;
    display: flex;
    width: var(--buttonWidth);
    height: var(--buttonWidth);
    color: var(--textAccent);
  }
  button svg {
    width: var(--buttonWidth);
    height: var(--buttonWidth);
  }

  #nav-panel {
    position: fixed;
    right: 0;
    top: 0;
    padding: 1.5rem;
    width: 70%;
    background: var(--accent);
    transform: translate3d(100%, 0, 0);
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  ul {
    display: flex;
    flex-direction: column;
  }

  a {
    color: var(--accentContrastColor);
    text-decoration: none;
    display: inline-block;
    padding: 0.85rem;
    padding-left: 0;
    position: relative;
  }

  [aria-current="page"] {
    font-weight: bold;
    color: var(--textAccent);
    text-decoration-thickness: 6px;
    text-underline-offset: 0.25rem;
    text-decoration: underline;
  }

  [aria-current="page"]::after {
    content: "";
    width: 100%;
    height: 3px;
    background: var(--accent);
    position: absolute;
    bottom: 0.75rem;
    left: 0;
  }

  #nav-close {
    align-self: flex-end;
    transform: translateY(1.25rem);
  }

  #nav-open[aria-expanded="true"] + #nav-panel {
    transition: transform 0.2s cubic-bezier(0.215, 0.61, 0.355, 1);
    transform: translate3d(0, 0, 0);
    z-index: 3;
  }

  :global(.js-backdrop) {
    position: fixed;
    left: 0;
    top: 0;
    z-index: 2;
    opacity: 0.75;
    width: 100%;
    background: var(--surface);
  }
</style>

<script>
  import { emitter } from "../lib/utils";
  const navPanel = document.getElementById(`nav-panel`);
  const openMenuButton = document.getElementById("nav-open");
  const closeMenuButton = document.getElementById("nav-close");
  const backdrop = document.createElement("div");
  backdrop.setAttribute("aria-hidden", "true");
  backdrop.setAttribute("class", "js-backdrop");

  function setJsAttributes() {
    navPanel.setAttribute("inert", "");
    navPanel.setAttribute("aria-role", "dialog");
    openMenuButton.setAttribute("aria-controls", "js-main-menu");
    openMenuButton.setAttribute("aria-expanded", "false");
  }

  function trapFocus(element) {
    // get all focusable elements
    const focusableEls = element.querySelectorAll(
      "a[href]:not([disabled]), button:not([disabled])"
    );
    // Save first and last focusable elements
    const firstFocusableEl = focusableEls[0];
    const lastFocusableEl = focusableEls[focusableEls.length - 1];
    const KEYCODE_TAB = 9;

    // listen for a key press
    element.addEventListener("keydown", function (e) {
      const isTabPressed = e.key === "Tab" || e.keyCode === KEYCODE_TAB;

      // if the key pressed is not TAB, stop function execution
      if (!isTabPressed) {
        return;
      }

      // if shift + tab
      if (e.shiftKey) {
        if (document.activeElement === firstFocusableEl) {
          lastFocusableEl.focus();
          e.preventDefault();
        }
      }
      // else if tab
      else {
        if (document.activeElement === lastFocusableEl) {
          firstFocusableEl.focus();
          e.preventDefault();
        }
      }
    });
  }

  function lockBody() {
    document.body.style.overflow = "hidden";
    document.body.style.touchAction = "none";
    document.body.style.height = `${window.innerHeight}px`;
    navPanel.style.height = `${window.innerHeight}px`;
    backdrop.style.height = `${window.innerHeight}px`;
  }

  function unLockBody() {
    document.body.removeAttribute("style");
    navPanel.removeAttribute("style");
    backdrop.removeAttribute("style");
  }

  function openMenu() {
    navPanel.removeAttribute("inert");
    openMenuButton.setAttribute("aria-expanded", "true");
    document.body.appendChild(backdrop);
    lockBody();
    emitter.emit("menu-toggle", true);
    trapFocus(navPanel);
    // @ts-ignore
    function handleKeydown(e) {
      if (e.key === "Escape") {
        closeMenu();
      }
    }
    navPanel.addEventListener("keydown", handleKeydown);
    // @ts-ignore
    navPanel._handleKeydown = handleKeydown;
  }

  function closeMenu() {
    navPanel.setAttribute("inert", "");
    openMenuButton.setAttribute("aria-expanded", "false");
    openMenuButton.focus();
    document.body.removeChild(backdrop);
    emitter.emit("menu-toggle", false);
    unLockBody();
    // @ts-ignore
    if (navPanel._handleKeydown) {
      // @ts-ignore
      navPanel.removeEventListener("keydown", navPanel._handleKeydown);
      // @ts-ignore
      delete navPanel._handleKeydown;
    }
  }

  openMenuButton.addEventListener("click", function (e) {
    e.preventDefault();
    openMenu();
  });

  closeMenuButton.addEventListener("click", function (e) {
    e.preventDefault();
    closeMenu();
  });

  setJsAttributes();
</script>
