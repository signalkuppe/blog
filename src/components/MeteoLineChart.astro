---
const { data } = Astro.props;
---

<canvas class="meteo-chart" data-points={JSON.stringify(data)}></canvas>

<script>
  // @ts-nocheck
  import { WEATHER_CONSTANTS } from "../constants";
  import "chartjs-adapter-dayjs-4/dist/chartjs-adapter-dayjs-4.esm";
  import { Chart, registerables } from "chart.js";
  import { getCssVar, emitter } from "../lib/utils";
  Chart.register(...registerables);

  const canvas = document.querySelectorAll(".meteo-chart");
  let charts = [];

  function drawChart(ctx, dataset) {
    const chart = new Chart(ctx, {
      type: "line", // Specify chart type
      data: {
        datasets: [
          {
            data: dataset, // Use your data here
            borderColor: getCssVar(WEATHER_CONSTANTS.GRAPH_LINE_COLOR),
            backgroundColor: "none",
            borderWidth: 2,
            tension: 0.1, // Optional: adds smooth curves
            pointRadius: 0, // Remove the dots
          },
        ],
      },
      options: {
        responsive: true,
        aspectRatio: 1.5,
        plugins: {
          legend: false,
        },
        scales: {
          x: {
            type: "time", // Use the time scale
            time: {
              parser: "YYYY-MM-DD HH:mm", // Format of your time data
              unit: "hour", // Granularity (e.g., minute, hour, day)
              round: "minute",
              displayFormats: {
                hour: "HH", // Format for displaying labels
              },
            },
            ticks: {
              stepSize: 2, // Sample every two hours
            },
            title: {
              display: false,
              text: "Ora",
            },
            grid: {
              color: getCssVar(WEATHER_CONSTANTS.GRAPH_GRID_COLOR),
            },
          },
          y: {
            title: {
              display: false,
            },
            grid: {
              color: getCssVar(WEATHER_CONSTANTS.GRAPH_GRID_COLOR),
            },
            ticks: {
              callback: function (value) {
                return value;
              },
            },
          },
        },
      },
    });
    charts.push(chart);
  }

  function init() {
    if (charts.length) {
      charts.forEach((chart) => chart.destroy());
    }
    canvas.forEach((canva) => {
      const ctx = canva.getContext("2d");
      const dataset = JSON.parse(canva.getAttribute("data-points"));
      drawChart(ctx, dataset);
    });
  }

  init();

  emitter.on("dark-mode-change", (mode) => {
    // otherwise getCssVar is not re-evaluated
    init();
  });
</script>
