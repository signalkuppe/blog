---
import "photoswipe/dist/photoswipe.css";
import PageTitle from "../../components/PageTitle.astro";
import PhotoCard from "../../components/PhotoCard.astro";
import {
  headPageTitle,
  portfolioPhotoSlug,
  validPhotos,
} from "../../lib/utils";
import { getData } from "../../lib/contentful";
import Layout from "../../layouts/Layout.astro";
import Pager from "../../components/Pager.astro";
import PhotoDisclaimer from "../../components/PhotoDisclaimer.astro";
import { siteSlogan } from "../../constants";

export async function getStaticPaths({ paginate }) {
  const { portfolio: photos } = await getData({
    type: "portfolio",
    sort: "-fields.date",
  });

  return paginate(validPhotos(photos), {
    pageSize: 12,
  });
}

interface Props {
  page?: any;
}

const { page } = Astro.props;

let pageTitle = "Portfolio";

if (page.currentPage > 1) {
  pageTitle = `${pageTitle}, pagina ${page.currentPage}`;
}

const description = "Una raccolta delle mie foto pi√π belle";
---

<Layout
  title={headPageTitle(pageTitle, siteSlogan)}
  description={description}
  ogImage="/og-image.jpg"
>
  <Fragment slot="head">
    <link rel="preconnect" href="https://images.ctfassets.net/" crossorigin />
  </Fragment>

  <div class="cage">
    <PageTitle subTitle={description}>{pageTitle}</PageTitle>
  </div>

  <div class="container">
    <ul id="photo-gallery">
      {
        page.data.map((photo) => {
          return (
            <li>
              <a
                aria-label={photo.fields.photo.fields.title}
                href={`/${portfolioPhotoSlug(photo)}`}
                data-download={photo.fields.photo.fields.file.url}
                data-pswp-src={`${photo.fields.photo.fields.file.url}?w=1024&fit=thumb&q=60&fm=avif`}
                data-pswp-width={
                  photo.fields.photo.fields.file.details.image.width
                }
                data-pswp-height={
                  photo.fields.photo.fields.file.details.image.height
                }
                data-pswp-srcset={`${photo.fields.photo.fields.file.url}?w=1200&fit=thumb&q=60&fm=avif 1000w, ${photo.fields.photo.fields.file.url}?w=2500&fit=thumb&q=60&fm=avif 2000w`}
              >
                <PhotoCard photo={photo} />
              </a>
            </li>
          );
        })
      }
    </ul>
    <div class="cage bottom">
      <nav aria-label="Pagine">
        <Pager page={page} />
      </nav>
      <p class="disclaimer"><PhotoDisclaimer /></p>
    </div>
  </div>
</Layout>

<script>
  //@ts-nocheck
  import { emitter } from "../../lib/utils";
  import PhotoSwipeLightbox from "photoswipe/lightbox";
  import PhotoSwipe from "photoswipe";

  document.addEventListener("DOMContentLoaded", () => {
    emitter.emit("header-background-change", true);
    const lightbox = new PhotoSwipeLightbox({
      gallery: "#photo-gallery",
      children: "a",
      pswpModule: PhotoSwipe,
      showHideAnimationType: "zoom",
      showAnimationDuration: 500,
      hideAnimationDuration: 250,
    });
    lightbox.on("uiRegister", function () {
      lightbox.pswp.ui.registerElement({
        name: "download-button",
        order: 8,
        isButton: true,
        tagName: "a",
        html: {
          isCustomSVG: true,
          inner:
            '<path d="M20.5 14.3 17.1 18V10h-2.2v7.9l-3.4-3.6L10 16l6 6.1 6-6.1ZM23 23H9v2h14Z" id="pswp__icn-download"/>',
          outlineID: "pswp__icn-download",
        },

        onInit: (el, pswp) => {
          el.setAttribute("download", "");
          el.setAttribute("target", "_blank");
          el.setAttribute("rel", "noopener");

          pswp.on("change", () => {
            el.href = pswp.currSlide.data.element.getAttribute("data-download");
          });
        },
      });
      lightbox.pswp.ui.registerElement({
        name: "custom-caption",
        order: 9,
        isButton: false,
        appendTo: "root",
        html: "Caption text",
        onInit: (el, pswp) => {
          lightbox.pswp.on("change", () => {
            const currSlideElement = lightbox.pswp.currSlide.data.element;
            let captionHTML = "";
            if (currSlideElement) {
              captionHTML = currSlideElement
                .querySelector("img")
                .getAttribute("alt");
            }
            el.innerHTML = captionHTML || "";
          });
        },
      });
    });

    lightbox.init();
  });
</script>

<style media="screen">
  .container {
    --space: 1.5rem;
    padding: var(--space);
  }
  ul {
    display: flex;
    flex-direction: column;
    gap: var(--space);
  }

  a {
    text-decoration: none;
    display: block;
  }

  a:focus-visible {
    outline: none;
  }

  .bottom {
    margin: 8rem auto 4rem auto;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .disclaimer {
    margin-top: 3rem;
    max-width: 70ch;
    font-size: 0.75rem;
  }

  @media screen and (width > 30rem) {
    ul {
      display: block;
      columns: 2;
      column-gap: var(--space);
    }
    li {
      margin-bottom: var(--space);
      break-inside: avoid;
    }
  }

  @media screen and (width > 60rem) {
    ul {
      columns: 3;
    }
  }

  :global(.pswp__custom-caption) {
    background: black;
    font-size: 16px;
    color: white;
    width: fit-content;
    padding: 2px 8px;
    border-radius: 4px;
    position: absolute;
    left: 50%;
    bottom: 16px;
    transform: translateX(-50%);
    text-align: center;
  }
</style>
