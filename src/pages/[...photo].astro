---
import { flatten } from "underscore";
import { postPhotoSlug } from "../lib/utils";
import { getPosts } from "../lib/contentful";
import PhotoLayout from "../layouts/PhotoLayout.astro";
import Spinner from "../components/Spinner.astro";
import ChevronLeftIcon from "../icons/ChevronLeftIcon.astro";
import ChevronRightIcon from "../icons/ChevronRightIcon.astro";
import CloseIcon from "../icons/CloseIcon.astro";
import DownloadIcon from "../icons/DownloadIcon.astro";

export async function getStaticPaths() {
  const { posts } = await getPosts();

  const pages = flatten(
    posts.map((post) => {
      const postPhotos = post.fields.gallery;
      return postPhotos.map((photo, i) => {
        return {
          params: { photo: postPhotoSlug(post, photo) },
          props: {
            photo,
            post,
            prev: postPhotos[i - 1],
            next: postPhotos[i + 1],
          },
        };
      });
    })
  );

  return pages;
}

interface Props {
  photo: any;
  post: any;
  prev;
  next;
}

const { photo, post, prev, next } = Astro.props;
---

<PhotoLayout
  title={`${photo.fields.title} - Signalkuppe`}
  description={photo.fields.title}
  ogImage={`https:${photo.fields.file.url}?w=1200&h=600&fit=thumb&q=70&fm=jpg`}
>
  <div class="photo-container">
    <nav>
      <ul>
        {
          prev && (
            <li>
              <a href={`/${postPhotoSlug(post, prev)}`} class="photo-prev">
                <ChevronLeftIcon aria-hidden="true" />
                <span class="visually-hidden">Foto precedente</span>
              </a>
            </li>
          )
        }
        {
          next && (
            <li>
              <a href={`/${postPhotoSlug(post, next)}`} class="photo-next">
                <ChevronRightIcon aria-hidden="true" />
                <span class="visually-hidden">Foto successiva</span>
              </a>
            </li>
          )
        }
        <li>
          <a href={`/${post.fields.slug}#post-gallery`} class="photo-back">
            <CloseIcon aria-hidden="true" /><span class="visually-hidden"
              >Torna a {post.fields.title}</span
            ></a
          >
        </li>
      </ul>
      <button
        class="photo-download"
        data-file={photo.fields.file.url}
        data-name={photo.fields.file.fileName}
        ><DownloadIcon aria-hidden="true" class="download-icon" />
        <Spinner class="loading-indicator" size="1.5rem" />
        <span class="visually-hidden">Scarica la foto</span></button
      >
    </nav>

    <picture>
      <div class="loader">
        <Spinner size="2rem" />
        <p>Carico la foto</p>
      </div>

      <source
        srcset={`${photo.fields.file.url}?w=1024&q=70&fm=avif`}
        media="(max-width: 800px)"
      />
      <source
        srcset={`${photo.fields.file.url}?w=2048&q=70&fm=avif`}
        media="(max-width: 1600px)"
      />
      <img
        src={`${photo.fields.file.url}?w=2560&q=70&fm=avif`}
        alt={photo.fields.title || ""}
        width={photo.fields.file.details.image.width}
        height={photo.fields.file.details.image.height}
        loading="lazy"
        decoding="async"
        class="photo-image"
      />
    </picture>
    <p class="photo-caption">{photo.fields.title}</p>
  </div>
</PhotoLayout>

<style>
  .photo-container {
    overflow: hidden;
  }
  picture {
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 1fr;
    height: 100svh;
    width: 100%;
  }

  .loader {
    grid-area: 1/1;
    place-self: center;
    z-index: 2;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    z-index: 1;
  }

  img {
    display: block;
    grid-area: 1/1;
    place-self: center;
    aspect-ratio: attr(width) / attr(height);
    width: 100vw;
    max-height: 100svh;
    object-fit: contain;
    z-index: 2;
  }

  nav a,
  nav button {
    position: absolute;
    z-index: 3;
    padding: 1rem;
  }

  nav svg {
    height: 1.5rem;
    color: var(--textAccent);
  }

  .photo-prev,
  .photo-next {
    top: 50%;
  }

  .photo-prev {
    left: 0;
    transform: translate(0%, -50%);
  }

  .photo-next {
    right: 0;
    transform: translate(0%, -50%);
  }

  .photo-back {
    right: 0;
    transform: translateX(5%);
  }

  .photo-download {
    right: 2.5rem;
    transform: translateX(5%);
    cursor: pointer;
  }

  .photo-download .loading-indicator {
    display: none;
  }

  .photo-download .download-icon {
    display: block;
  }

  .photo-download.is-downloading .loading-indicator {
    display: block;
  }
  .photo-download.is-downloading .download-icon {
    display: none;
  }

  .photo-caption {
    position: absolute;
    width: 100%;
    bottom: 0;
    left: 0;
    text-align: center;
    padding: 1.5rem;
    z-index: 3;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    font-weight: bold;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .is-hovering .photo-caption {
    opacity: 1;
  }

  @media screen and (width < 60rem) {
    .photo-prev,
    .photo-next {
      opacity: 0;
    }

    .is-hovering .photo-prev,
    .is-hovering .photo-next {
      opacity: 1;
    }
  }
</style>

<script>
  import Hammer from "hammerjs";
  import { throttle } from "../lib/utils";

  const container = document.querySelector(".photo-container");
  const image = document.querySelector(".photo-image");
  const downloadButton = document.querySelector(".photo-download");
  const nextPhoto = document.querySelector(".photo-next");
  const prevPhoto = document.querySelector(".photo-prev");

  downloadButton.addEventListener("click", async function (e) {
    e.preventDefault();
    downloadButton.classList.add("is-downloading");
    const fileName = downloadButton.getAttribute("data-name");
    const remoteFileUrl = `https:${downloadButton.getAttribute("data-file")}`;
    const response = await fetch(remoteFileUrl);
    const fileData = await response.blob();
    const photoUrl = URL.createObjectURL(fileData);
    const link = document.createElement("a");
    link.href = photoUrl;
    link.download = fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(photoUrl);
    downloadButton.classList.remove("is-downloading");
  });

  // create a div over the real size of the image to trigger an hover effect and show the caption
  const imageWidth = parseInt(image.getAttribute("width"));
  const imageHeight = parseInt(image.getAttribute("height"));
  const imageRatio = imageHeight / imageWidth;
  const imageOverlayDiv = document.createElement("div");
  imageOverlayDiv.setAttribute("aria-hidden", "true");
  imageOverlayDiv.setAttribute("class", "photo-overlay");
  imageOverlayDiv.style.position = "absolute";
  imageOverlayDiv.style.top = "0px";
  imageOverlayDiv.style.zIndex = "2";
  imageOverlayDiv.style.cursor = "help";
  container.append(imageOverlayDiv);
  const hammertime = new Hammer(container);

  function setImageOverlayStyles() {
    const shortest = Math.min(window.innerHeight, window.innerWidth);

    if (shortest === window.innerHeight) {
      // landscape
      const imageRealWidth = shortest / imageRatio;
      imageOverlayDiv.style.left = `${
        (window.innerWidth - imageRealWidth) / 2
      }px`;
      imageOverlayDiv.style.top = "0px";
      imageOverlayDiv.style.width = `${imageRealWidth}px`;
      imageOverlayDiv.style.height = `${window.innerHeight}px`;
    } else {
      // portrait
      const imageRealHeight = window.innerWidth * imageRatio;

      imageOverlayDiv.style.left = "0px";
      imageOverlayDiv.style.top = `${
        (window.innerHeight - imageRealHeight) / 2
      }px`;
      imageOverlayDiv.style.width = `${window.innerWidth}px`;
      imageOverlayDiv.style.height = `${imageRealHeight}px`;
    }
  }

  imageOverlayDiv.addEventListener("mouseenter", function () {
    container.classList.add("is-hovering");
    imageOverlayDiv.focus();
  });
  imageOverlayDiv.addEventListener("mouseleave", function () {
    container.classList.remove("is-hovering");
  });

  container.addEventListener("click", function (e) {
    if (e.target !== imageOverlayDiv) {
      container.classList.remove("is-hovering");
    }
  });

  setImageOverlayStyles();

  window.addEventListener("resize", throttle(setImageOverlayStyles, 100), {
    passive: true,
  });

  hammertime.get("swipe").set({ direction: Hammer.DIRECTION_HORIZONTAL });

  hammertime.on("swipeleft", function () {
    if (nextPhoto) {
      window.location.href = nextPhoto.getAttribute("href");
    }
  });

  hammertime.on("swiperight", function () {
    if (prevPhoto) {
      window.location.href = prevPhoto.getAttribute("href");
    }
  });
</script>
