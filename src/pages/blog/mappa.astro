---
import { getPosts } from "../../lib/contentful";
import Layout from "../../layouts/Layout.astro";
import BlogLayout from "../../layouts/BlogLayout.astro";
import "leaflet/dist/leaflet.css";
const { posts } = await getPosts();
const pageTitle = "Mappa delle uscite";
console.log(posts[0].fields);
---

<Layout
  title={`${pageTitle} - Signalkuppe`}
  description="Blog personale di Matteo Leoni"
  ogImage="/og-image.png"
>
  <BlogLayout pageTitle={pageTitle} activeTab="mappa">
    <div
      id="map"
      data-markers={JSON.stringify(
        posts.map((post) => ({
          id: post.sys.id,
          title: post.fields.title,
          description: post.fields.description,
          slug: post.fields.slug,
          category: post.fields.category[0],
          lat: post.fields.location.lat,
          lon: post.fields.location.lon,
          image: {
            url: post.fields.cover.fields.file.url,
          },
        }))
      )}
    >
    </div>
  </BlogLayout>
</Layout>

<script>
  import L from "leaflet";
  import "leaflet-fullscreen";
  const mapDiv = document.getElementById("map");
  const zoom = 7;
  const lat = 45.7929;
  const lng = 9.0;
  const mymap = L.map("map", {
    renderer: L.canvas(),
    tap: false,
    attributionControl: false,
    zoomControl: false,
    fullscreenControl: {
      position: "topright",
    },
  });

  const markers = JSON.parse(mapDiv.dataset.markers);

  mymap.setView([lat, lng], zoom);
  L.tileLayer(
    "https://tile.thunderforest.com/outdoors/{z}/{x}/{y}.png?apikey=f890f7037bd243ee9602a36c56fc6dc2",
    {
      attribution:
        '&copy; <a href="http://www.thunderforest.com/">Thunderforest</a>, &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      apikey: "f890f7037bd243ee9602a36c56fc6dc2",
      maxZoom: 22,
    }
  ).addTo(mymap);
  L.control
    .zoom({
      position: "topright",
    })
    .addTo(mymap);
  mymap.scrollWheelZoom.disable();
  mymap.on("fullscreenchange", function () {
    if (mymap.isFullscreen()) {
      mapDiv.classList.add("fullscreen");
    } else {
      mapDiv.classList.remove("fullscreen");
    }
  });

  markers.forEach(function (marker) {
    const customIcon = L.divIcon({
      html: `
        <svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" viewBox="0 0 256 256">
          <g style="stroke:none;stroke-width:0;stroke-dasharray:none;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:10;fill:none;fill-rule:nonzero;opacity:1" transform="matrix(2.81 0 0 2.81 1.407 1.407)">
            <path d="M45 90C30.086 71.757 15.174 46.299 15.174 29.826S28.527 0 45 0s29.826 13.353 29.826 29.826S59.914 71.757 45 90z" style="stroke:none;stroke-width:1;stroke-dasharray:none;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:10;fill:#dc2028;fill-rule:nonzero;opacity:1"/>
            <circle cx="45" cy="29.38" r="13.5" style="stroke:none;stroke-width:1;stroke-dasharray:none;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:10;fill:#fff;fill-rule:nonzero;opacity:1"/>
            <path d="M48.596 5.375C33.355 5.375 21 17.73 21 32.97c0 1.584.141 3.135.397 4.646A24.952 24.952 0 0 1 20 29.375c0-13.807 11.193-25 25-25 2.889 0 5.661.496 8.242 1.397a27.786 27.786 0 0 0-4.646-.397z" style="stroke:none;stroke-width:1;stroke-dasharray:none;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:10;fill:#e74d46;fill-rule:nonzero;opacity:1"/>
          </g>
        </svg>
      `,
    }); // use custom div for icons

    const popupHtml = `
            <div class="popup-wrapper">
              <img width="80" height="80" src="${marker.image.url}?w=200&h=200&fit=thumb&q=90&fm=avif" alt="" />
              <div class="popup-right">
                <a href="${marker.slug}" class="popup-title">${marker.title}</a>
                <p>${marker.description}</p>
              </div>
             
            </div>
        `;
    const mk = L.marker([marker.lat, marker.lon], {
      icon: customIcon,
    })
      .addTo(mymap)
      .bindPopup(popupHtml);

    mk.on("click", function () {
      mk._icon.classList.add("is-selected");
    });
  });
</script>

<style is:global>
  /** leaflet overrides */
  #map {
    width: 100%;
    height: 100%;
    min-height: 70vh;
  }

  #map.fullscreen .leaflet-pane[style] {
    z-index: 100 !important;
  }

  #map.fullscreen .leaflet-right {
    z-index: 100 !important;
  }

  .leaflet-pane[style],
  .leaflet-right {
    z-index: 0 !important;
  }

  .leaflet-control-fullscreen a {
    background: #fff url("/images/fullscreen@2x.png") no-repeat 2px 2px;
    background-size: 26px 52px;
  }

  .leaflet-div-icon[style] {
    border: none;
    background: none;
    width: 1.25rem !important;
    height: 1.25rem !important;
  }

  html[data-theme="dark"] .leaflet-tile-pane {
    filter: grayscale(1);
  }

  @media (prefers-color-scheme: dark) {
    html:not([data-theme]) .leaflet-tile-pane {
      filter: grayscale(1);
    }
  }

  .leaflet-popup-content-wrapper {
    border-radius: 5px !important;
  }

  .leaflet-popup-content {
    font-family: inherit !important;
    margin: 0 !important;
    color: black;
    width: max-content !important;
  }

  .leaflet-popup-content a {
    color: inherit;
    font-weight: bold;
  }

  .leaflet-container a.leaflet-popup-close-button {
    color: black;
    font-size: 1rem;
    right: 0.25rem;
    top: 0.25rem;
  }

  .popup-wrapper {
    display: flex;
    gap: 0.85rem;
    padding: 0.85rem;
    max-width: 20rem;
  }

  .popup-right {
    margin-right: 1rem;
  }
  .popup-wrapper img {
    border-radius: 5px;
    display: block;
    aspect-ratio: 1 / 1;
    width: 80px;
    height: 80px;
    flex-shrink: 0;
    background: #eee;
  }

  .popup-title {
    text-wrap: balance;
  }
  .popup-wrapper p {
    font-size: 0.65rem;
    margin-top: 0.5rem;
    margin-bottom: 0;
    color: #666;
  }
</style>
