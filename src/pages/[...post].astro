---
import { categories } from "../constants";
import { getPosts } from "../lib/contentful";
import Layout from "../layouts/Layout.astro";
import PostHeader from "../components/PostHeader.astro";
import PostCover from "../components/PostCover.astro";
import PostBody from "../components/PostBody.astro";
import PostGallery from "../components/PostGallery.astro";

export async function getStaticPaths() {
  const { posts } = await getPosts();
  const pages = posts.map((post) => ({
    params: { post: post.fields.slug },
    props: {
      post,
    },
  }));
  return pages;
}

interface Props {
  post: any;
}

const { post } = Astro.props;
const categorySlug = categories.find(
  (cat) => cat.title === post.fields.category[0]
)?.slug;
---

<Layout
  title={`${post.fields.title} - Signalkuppe`}
  description="Mappa delle uscite"
  ogImage={`https:${post.fields.cover.fields.file.ur}?w=1200&h=600&fit=thumb&q=70&fm=jpg`}
>
  <Fragment slot="head">
    <link rel="preconnect" href="https://images.ctfassets.net/" crossorigin />
  </Fragment>
  <div class="cage header">
    <PostHeader post={post} />
  </div>
  <div class="cover">
    <PostCover post={post} />
  </div>
  <nav aria-label="sezioni" id="post-nav">
    <ul role="list" class="cage">
      <li><a href="#post-body" aria-current="page">Relazione</a></li>
      <li><a href="#post-gallery">Foto</a></li>
    </ul>
  </nav>

  <section class="section body" aria-labelledby="post-body" id="post-body">
    <div class="cage">
      <h2>Relazione</h2>
      <PostBody post={post} />
      <p>
        Pubblicato in <a href={`/blog/${categorySlug}`} class="category">
          <span aria-hidden="true">#</span>{post.fields.category}
        </a>
      </p>
    </div>
  </section>
  {
    post.fields.gallery.length > 0 && (
      <section
        class="section gallery"
        aria-labelledby="post-gallery"
        id="post-gallery"
      >
        <div class="cage">
          <h2>Galleria fotografica</h2>
          <PostGallery post={post} />
        </div>
      </section>
    )
  }
</Layout>

<style>
  .header {
    margin-bottom: 3rem;
  }

  .cover {
    margin-bottom: 1rem;
  }

  .body {
    margin-bottom: 3rem;
  }

  h2 {
    margin-bottom: 0.5rem;
  }

  #post-body h2 {
    visibility: hidden;
    margin: 0;
  }

  .section:target {
    scroll-margin-top: 8rem;
  }

  nav {
    position: sticky;
    top: -1px;
    padding: 2rem 0;
  }

  nav ul {
    display: flex;
    gap: 1rem;
  }

  nav.is-sticky {
    background: var(--surface);
  }

  nav a {
    color: var(--text);
    text-decoration: none;
    display: block;
    padding-bottom: 0.1rem;
    border-bottom: 3px solid transparent;
  }

  nav a:hover {
    color: var(--textAccent);
  }

  nav a[aria-current="page"] {
    font-weight: bold;
    color: var(--textAccent);
    border-color: var(--accent);
  }

  @media screen and (width > 60rem) {
    .header {
      margin-bottom: 5rem;
    }

    .cover {
      margin-bottom: 3rem;
    }

    nav {
      margin-bottom: 1rem;
    }
  }
</style>

<script>
  import { throttle } from "../lib/utils";

  const cover = document.querySelector(".cover");
  const header = document.getElementById("header");
  const sections = document.querySelectorAll(".section");
  const nav = document.getElementById("post-nav");
  const navLinks = nav.querySelectorAll("a");
  const distance = cover.getBoundingClientRect().y;

  const headerHeight = header.getBoundingClientRect().height;
  function createHeaderEvent(isDark) {
    return new CustomEvent("header-background-change", {
      detail: { isDark: isDark },
    });
  }

  const darkHeaderEvent = createHeaderEvent(true);
  const lightHeaderEvent = createHeaderEvent(false);

  let currentActive = 0;
  const sectionMargin = 200;
  const makeActive = (link) =>
    navLinks[link]?.setAttribute("aria-current", "page");
  const removeActive = (link) => navLinks[link].removeAttribute("aria-current");
  const removeAllActive = () =>
    [...Array(sections.length).keys()].forEach((link) => removeActive(link));

  function handleScroll() {
    if (window.scrollY > distance - headerHeight) {
      document.dispatchEvent(darkHeaderEvent);
    } else {
      document.dispatchEvent(lightHeaderEvent);
    }

    const current =
      sections.length -
      [...sections].reverse().findIndex((section) => {
        return window.scrollY >= section.offsetTop - sectionMargin;
      }) -
      1;

    if (current !== currentActive && current !== 2) {
      removeAllActive();
      currentActive = current;
      makeActive(current);
    }
  }

  window.addEventListener("scroll", throttle(handleScroll, 100), {
    passive: true,
  }); // Runs every 100ms

  const navObserver = new IntersectionObserver(
    ([e]) => {
      if (e.intersectionRatio < 1) {
        nav.classList.add("is-sticky");
      } else {
        nav.classList.remove("is-sticky");
      }
    },
    { threshold: [1], rootMargin: "-1px 0px 0px 0px" }
  );

  navObserver.observe(nav);
</script>
